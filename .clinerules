# .clinerules - Documentation Update Rules for Mnemosyne

version: 1.0.0
description: Rules for maintaining documentation when making code changes

# File mapping rules - which docs to update based on which files
file_mappings:
  # Backend API changes
  - source_patterns: ["backend/src/api/*.py"]
    doc_files: 
      - docs/api/openapi.yaml
      - docs/backend/api.md
    rule: "When modifying API endpoints, update both the OpenAPI specification and the backend API documentation"

  # Audio processing changes
  - source_patterns: ["backend/src/audio/*.py"]
    doc_files: ["docs/backend/audio.md"]
    rule: "Document any changes to audio capture, processing, or transcription functionality"

  # LLM changes
  - source_patterns: ["backend/src/llm/*.py"]
    doc_files: ["docs/backend/llm.md"]
    rule: "Update documentation when changing model interactions, summarization logic, or LLM configurations"

  # Service changes
  - source_patterns: ["backend/src/services/*.py"]
    doc_files: ["docs/backend/services.md"]
    rule: "Document changes to service patterns, resource management, or shared functionality"

  # Frontend component changes
  - source_patterns: ["frontend/src/components/*.tsx"]
    doc_files: ["docs/frontend/components.md"]
    rule: "Update component documentation when changing props, features, or behaviors"

  # Frontend hooks changes
  - source_patterns: ["frontend/src/hooks/*.ts"]
    doc_files: ["docs/frontend/hooks.md"]
    rule: "Document changes to custom hooks, including API changes, new features, or behavior modifications"

  # Type changes
  - source_patterns: ["frontend/src/types.ts"]
    doc_files: 
      - docs/api/openapi.yaml
      - docs/frontend/components.md
      - docs/frontend/hooks.md
    rule: "When modifying TypeScript interfaces, ensure corresponding documentation is updated in affected areas"

  # Architecture changes
  - source_patterns: ["backend/src/**/*.py", "frontend/src/**/*.tsx", "frontend/src/**/*.ts"]
    doc_files: ["docs/architecture.md"]
    rule: "For significant architectural changes affecting multiple components, update the architecture documentation"

# Documentation standards
standards:
  - "Use Markdown for textual documentation"
  - "Use OpenAPI 3.0 for API specifications"
  - "Include code examples for non-trivial functionality"
  - "Document function parameters, return values, and error cases"
  - "Include usage examples for components and hooks"
  - "Maintain consistent formatting and style across documentation files"

# Change process rules
change_process:
  - "Update documentation in the same pull request as code changes"
  - "Include documentation changes in commit messages"
  - "For large changes, update the getting-started.md and usage-examples.md if applicable"
  - "When adding new features, add corresponding examples to usage-examples.md"
  - "When modifying configuration options, update getting-started.md"

# Documentation review checklist
review_checklist:
  - "Are all affected documentation files updated?"
  - "Do code examples match the new implementation?"
  - "Are any new parameters, options, or return values documented?"
  - "Has the API specification been updated if endpoints changed?"
  - "Do the architecture diagrams reflect the current system design?"
  - "Is the documentation clear and understandable to new developers?"

# Validation rules (for automated checks)
validation:
  - "All public functions and components must have documentation"
  - "All API endpoints must be specified in the OpenAPI document"
  - "Changes to TypeScript interfaces must be reflected in relevant documentation"
  - "New files should have corresponding documentation entries"

# Examples of documentation updates required for specific changes
examples:
  # Example 1: Adding a new API endpoint
  - change_type: "Adding a new API endpoint"
    files_changed: ["backend/src/api/main.py"]
    doc_updates:
      - file: "docs/api/openapi.yaml"
        what_to_update: "Add the new endpoint specification including path, method, parameters, request body, responses, and error handling"
      - file: "docs/backend/api.md"
        what_to_update: "Document the endpoint's purpose, parameters, authentication requirements, and usage examples"
      - file: "docs/usage-examples.md"
        what_to_update: "If it's a significant feature, add an example of how to use the new endpoint"

  # Example 2: Modifying a component prop
  - change_type: "Changing a component prop"
    files_changed: ["frontend/src/components/SessionList.tsx"]
    doc_updates:
      - file: "docs/frontend/components.md"
        what_to_update: "Update the Props interface documentation, explain the new behavior, and modify usage examples"

  # Example 3: Adding a new model option
  - change_type: "Adding a new summarization model"
    files_changed: ["backend/src/llm/summarizer.py"]
    doc_updates:
      - file: "docs/backend/llm.md"
        what_to_update: "Document the new model option, its characteristics, and appropriate use cases"
      - file: "docs/getting-started.md"
        what_to_update: "Update the configuration section if the new model requires special setup"

  # Example 4: Changing the audio processing pipeline
  - change_type: "Modifying the audio processing pipeline"
    files_changed: ["backend/src/audio/transcriber.py"]
    doc_updates:
      - file: "docs/backend/audio.md"
        what_to_update: "Update the process flow, document new parameters or behaviors, and note any compatibility issues"
      - file: "docs/architecture.md"
        what_to_update: "If the change affects the overall architecture, update the relevant sections and diagrams"

# Version control for documentation
versioning:
  - "Major application version updates should include a full documentation review"
  - "For feature additions, add a 'Since version X.Y.Z' note to relevant documentation sections"
  - "When deprecating features, mark them as 'Deprecated in version X.Y.Z' and include migration guidance"
  - "Keep an 'API Changes' section in the API documentation for tracking breaking changes across versions"
  - "Consider maintaining separate documentation branches for major versions if supporting multiple releases"
